<launch>

    <!-- arguments to pass in to the launch file -->
    <arg name="paused" default="true" />
    <arg name="use_sim_time" default="true" />
    <arg name="gui" default="true" />
    <arg name="headless" default="false" />
    <arg name="debug" default="false" />

    <!-- Resume the logic in empty_world.launch -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="debug" value="$(arg debug)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="paused" value="$(arg paused)" />
        <arg name="use_sim_time" value="$(arg use_sim_time)" />
        <arg name="headless" value="$(arg headless)" />
    </include>

    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find inverse_pendulum)/urdf/inverse_pendulum.xacro'" />

    <!-- Load the joint controller configurations from yaml file to parameter
         server -->
    <rosparam file="$(find inverse_pendulum_control)/config/inverse_pendulum_control.yaml" command="load" />

    <!-- Load the controllers -->
    <node name="controller_spawn" pkg="controller_manager" type="spawner" respawn="false"
        output="screen" ns="/inverse_pendulum" args="joint_state_controller joint1_position_controller" />

    <!-- convert joint states to TF transforms for rviz etc -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
        respawn="false" output="screen">
        <remap from="/joint_states" to="/inverse_pendulum/joint_states" />
    </node>

    <!-- Run a python script to send a service call to gazebo_ros to spawn a
         urdf robot -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
        args="-urdf -model inverse_pendulum -param robot_description" />

</launch>
